LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
USE ieee.std_logic_unsigned.ALL;
USE ieee.numeric_std.ALL;

ENTITY port_io IS
    GENERIC (
        base_addr : INTEGER := 0
    );
    PORT (
        nrst     : IN  STD_LOGIC;
        clk_in   : IN  STD_LOGIC;
        abus     : IN  STD_LOGIC_VECTOR(7 DOWNTO 0);
        dbus     : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0);
        wr_en    : IN  STD_LOGIC;
        rd_en    : IN  STD_LOGIC;
        port_io  : INOUT STD_LOGIC_VECTOR(7 DOWNTO 0)
    );
END ENTITY;

ARCHITECTURE arch OF port_io IS
    SIGNAL port_reg : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL dir_reg  : STD_LOGIC_VECTOR(7 DOWNTO 0);
    SIGNAL latch    : STD_LOGIC_VECTOR(7 DOWNTO 0);
BEGIN

    -- Asynchronous reset
    PROCESS(nrst, clk_in)
    BEGIN
        IF nrst = '0' THEN
            port_reg <= (OTHERS => '0');
            dir_reg  <= (OTHERS => '0');
        ELSIF rising_edge(clk_in) THEN
            -- Write operations
            IF wr_en = '1' THEN
                IF abus = std_logic_vector(to_unsigned(base_addr, 8)) THEN
                    port_reg <= dbus;
                ELSIF abus = std_logic_vector(to_unsigned(base_addr + 1, 8)) THEN
                    dir_reg <= dbus;
                END IF;
            END IF;
        END IF;
    END PROCESS;

    -- Read operations
    PROCESS(rd_en, abus, port_reg, dir_reg)
    BEGIN
        IF rd_en = '1' THEN
            IF abus = std_logic_vector(to_unsigned(base_addr, 8)) THEN
                dbus <= port_reg;
            ELSIF abus = std_logic_vector(to_unsigned(base_addr + 1, 8)) THEN
                dbus <= dir_reg;
            ELSE
                dbus <= (OTHERS => 'Z');
            END IF;
        ELSE
            dbus <= (OTHERS => 'Z');
        END IF;
    END PROCESS;

    -- Bidirectional port handling
    PROCESS(dir_reg, port_reg, port_io)
    BEGIN
        FOR i IN 0 TO 7 LOOP
            IF dir_reg(i) = '1' THEN
                port_io(i) <= port_reg(i); -- Output
            ELSE
                port_reg(i) <= port_io(i); -- Input
            END IF;
        END LOOP;
    END PROCESS;

END ARCHITECTURE;
